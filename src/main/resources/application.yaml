app:
  auth:
    header-scheme-name: authorization
    token-type: Bearer
    access-secret: DeaguGreenArtAcademyClass502ForJavaSpringBoot
    accessTokenExpiry: 200000
    refresh-secret: ForJavaSpringBootClass502DaeguGreenArtAcademy
    refreshTokenExpiry: 1296000000
    redis-access-black-key: "E-AT-BLACK"
    redis-refresh-key: "E-RT"
  oauth2:
    authorized-redirect-uris:
      - http://localhost:8080/oauth/redirect #카카카카카
      - http://192.168.0.208:8080/oauth/redirect
# mybatis config
mybatis:
  type-aliases-package: com.green.campingsmore
  mapper-locations: classpath:mapper/**/*.xml
# 토큰의 암호화 복호화를 위한 secret key로서 이후 HS256 알고리즘을 사용하기 위해, 256비트보다 커야한다.
# 알파벳은 한단어 당 8bit 이므로 32글자 이상이면 된다.
springboot:
  jwt:
    access-secret: DeaguGreenArtAcademyClass502ForJavaSpringBootaaaasdf
    refresh-secret: HelloWorldRefreshTokenCreateBySecretHaHaaasdfasdf
    header-scheme-name: Authorization
    token-type: Bearer

spring:
  mvc:
    pathmatch:
      matching-strategy: ant_path_matcher
  servlet:
    multipart:
      max-file-size: 50MB
      max-request-size: 100MB
#  datasource:
#    driver-class-name: org.mariadb.jdbc.Driver
#    jdbc-url: jdbc:mariadb://localhost:3306/team_e_test
#    username: root
#    password: green502
  datasource:
    driver-class-name: org.mariadb.jdbc.Driver
    jdbc-url: jdbc:mariadb://192.168.0.144:3306/team_e
    username: team_e
    password: green502
  jpa:
    hibernate:
#      ddl-auto: create-drop
      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
        format_sql: true
  data:
    redis:
      host: 192.168.0.144
      port: 6379
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: dfdfdfdf
            client-secret:
            scope:
              - email
              - profile
          facebook:
            client-id: dfdfdf
            client-secret: dfdfdf
            scope:
              - email
              - public_profile
          naver:
            client-id: dfdf
            client-secret: dfdf
            authorization-grant-type: authorization_code
            redirect-uri: "{baseUrl}/{action}/oauth2/code/{registrationId}"
            scope:
              - name
              - email
              - profile_image
            client-name: Naver
          kakao:
            client-id: 0fc03c2467ca0d7ca9999c9d1ed64911
            client-secret: HwJcwKO6NYs88Svm6UXxG5QcKtHJauXs
            client-authentication-method: client_secret_post
            authorization-grant-type: authorization_code
            redirect-uri: "{baseUrl}/{action}/oauth2/code/{registrationId}"
            scope:
              - profile_nickname
              - profile_image
              - account_email
            clientName: Kakao
        provider:
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id
file:
  dir: /home/download/
# swagger
springdoc:
  swagger-ui:
    path: /swagger.html
server:
  port: 8080
# KaKao
KaKao:
  Auth: 0fc03c2467ca0d7ca9999c9d1ed64911
# Naver
Naver:
  YOUR_CLIENT_ID: ncAR9prYDibH9NS7yQuA
  YOUR_CLIENT_SECRET: vl2B4Z4tvO
  NAVER_ID: green502test@naver.com
  SMTP: smtp.naver.com
  MAIL_PORT: 465
# cors
cors:
  allowed-origins: 'http://localhost:8080'
  allowed-methods: GET,POST,PUT,DELETE,OPTIONS
  allowed-headers: '*'
  max-age: 3600

---

spring:
  config:
    activate:
      on-profile: "test"
  datasource:
    jdbc-url: jdbc:mariadb://localhost:3306/campingsmore_test
    username: root
    password: green502
  sql:
    init:
      mode: always
      schema-locations: classpath:init/schema.sql
      data-locations: classpath:init/data.sql
      encoding: UTF-8
  jpa:
    defer-datasource-initialization: true

---

spring:
  config:
    activate:
      on-profile: "prod"
  datasource:
    jdbc-url: jdbc:mariadb://192.168.0.144:3306/team_e
  sql:
    init:
      mode: never
  jpa:
    hibernate:
      ddl-auto: none
  data:
    redis:
      host: 192.168.0.144
      port: 6379

# cors
cors:
  allowed-origins: 'http://192.168.0.144:5005'
  allowed-methods: GET,POST,PUT,DELETE,OPTIONS
  allowed-headers: '*'
  max-age: 3600

app:
  auth:
  oauth2:
    authorized-redirect-uris:
      - http://192.168.0.144:8080/oauth/redirect